
// generated by gocc; DO NOT EDIT.

package parser

import "github.com/Logiraptor/oak/flow/language/ast"

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab {
	ProdTabEntry{
		String: `S' : Pipeline	<<  >>`,
		Id: "S'",
		NTType: 0,
		Index: 0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Pipeline : empty	<< ast.Pipeline{}, nil >>`,
		Id: "Pipeline",
		NTType: 1,
		Index: 1,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.Pipeline{}, nil
		},
	},
	ProdTabEntry{
		String: `Pipeline : Component ";" Pipeline	<< ast.AddComponent(X[2], X[0]), nil >>`,
		Id: "Pipeline",
		NTType: 1,
		Index: 2,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddComponent(X[2], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `Pipeline : Connection ";" Pipeline	<< ast.AddConnection(X[2], X[0]), nil >>`,
		Id: "Pipeline",
		NTType: 1,
		Index: 3,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddConnection(X[2], X[0]), nil
		},
	},
	ProdTabEntry{
		String: `Component : "component" id id "()"	<< ast.NewComponent(X[1], X[2]), nil >>`,
		Id: "Component",
		NTType: 2,
		Index: 4,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewComponent(X[1], X[2]), nil
		},
	},
	ProdTabEntry{
		String: `Connection : "connect" id "." id id "." id	<< ast.NewConnection(X[1], X[3], X[4], X[6]), nil >>`,
		Id: "Connection",
		NTType: 3,
		Index: 5,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConnection(X[1], X[3], X[4], X[6]), nil
		},
	},
	
}
