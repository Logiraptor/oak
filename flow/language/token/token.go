
// generated by gocc; DO NOT EDIT.

package token

import(
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const(
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line int
	Column int
}

func (this Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", this.Offset, this.Line, this.Column)
}

type TokenMap struct {
	typeMap  []string
	idMap map[string]Type
}

func (this TokenMap) Id(tok Type) string {
	if int(tok) < len(this.typeMap) {
		return this.typeMap[tok]
	}
	return "unknown"
}

func (this TokenMap) Type(tok string) Type {
	if typ, exist := this.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (this TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", this.Id(tok.Type), tok.Type, tok.Lit)
}

func (this TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", this.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"empty",
		";",
		"component",
		"id",
		"(",
		")",
		",",
		"connect",
		"dot",
		"to",
		"string_lit",
		"int_lit",
		"true",
		"false",
	},

	idMap: map[string]Type {
		"INVALID": 0,
		"$": 1,
		"empty": 2,
		";": 3,
		"component": 4,
		"id": 5,
		"(": 6,
		")": 7,
		",": 8,
		"connect": 9,
		"dot": 10,
		"to": 11,
		"string_lit": 12,
		"int_lit": 13,
		"true": 14,
		"false": 15,
	},
}

