var _user$project$Main$translateMouse = function (p) {
	return {x: p.x - 300, y: p.y - 50};
};
var _user$project$Main$mouseMove = _elm_lang$mouse$Mouse$moves(
	function (_p0) {
		return _user$project$DataTypes$Drag(
			_user$project$Main$translateMouse(_p0));
	});
var _user$project$Main$windowResize = _elm_lang$window$Window$resizes(_user$project$DataTypes$Resize);
var _user$project$Main$moveNode = F3(
	function (model, id, pos) {
		var _p1 = A2(_user$project$Graph$nodeByID, model.graph, id);
		if (_p1.ctor === 'Nothing') {
			return _elm_lang$core$Native_Utils.crashCase(
				'Main',
				{
					start: {line: 68, column: 5},
					end: {line: 80, column: 73}
				},
				_p1)('undefined node! wtf!');
		} else {
			var oldProc = _p1._0.label;
			var newNode = A2(
				_user$project$Graph$Node,
				id,
				_elm_lang$core$Native_Utils.update(
					oldProc,
					{
						pos: {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Basics$toFloat(pos.x),
							_1: _elm_lang$core$Basics$toFloat(pos.y)
						}
					}));
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					graph: A2(_user$project$Graph$insertNode, model.graph, newNode)
				});
		}
	});
var _user$project$Main$noFx = function (m) {
	return {ctor: '_Tuple2', _0: m, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'Resize':
				return _user$project$Main$noFx(
					_elm_lang$core$Native_Utils.update(
						model,
						{dim: _p3._0}));
			case 'Click':
				return _user$project$Main$noFx(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selected: _elm_lang$core$Maybe$Just(_p3._0)
						}));
			case 'Unclick':
				return _user$project$Main$noFx(
					_elm_lang$core$Native_Utils.update(
						model,
						{selected: _elm_lang$core$Maybe$Nothing}));
			default:
				var _p4 = model.selected;
				if (_p4.ctor === 'Nothing') {
					return _user$project$Main$noFx(model);
				} else {
					return _user$project$Main$noFx(
						A3(_user$project$Main$moveNode, model, _p4._0, _p3._0));
				}
		}
	});
var _user$project$Main$view = _user$project$Layout$layout;
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: _user$project$DataTypes$state0,
	_1: A3(_elm_lang$core$Task$perform, _user$project$DataTypes$Resize, _user$project$DataTypes$Resize, _elm_lang$window$Window$size)
};
var _user$project$Main$initialSubs = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[_user$project$Main$windowResize, _user$project$Main$mouseMove]));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$initialSubs})
};
