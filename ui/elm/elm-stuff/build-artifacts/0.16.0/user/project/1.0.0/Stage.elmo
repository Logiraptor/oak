Elm.Stage = Elm.Stage || {};
Elm.Stage.make = function (_elm) {
   "use strict";
   _elm.Stage = _elm.Stage || {};
   if (_elm.Stage.values) return _elm.Stage.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Signal$Extra = Elm.Signal.Extra.make(_elm);
   var _op = {};
   var panPos = function () {
      var invertY = function (_p0) {    var _p1 = _p0;return {ctor: "_Tuple2",_0: _p1._0,_1: 0 - _p1._1};};
      var diff = F2(function (_p3,_p2) {    var _p4 = _p3;var _p5 = _p2;return {ctor: "_Tuple2",_0: _p5._0 - _p4._0,_1: _p5._1 - _p4._1};});
      var sum = F2(function (_p7,_p6) {    var _p8 = _p7;var _p9 = _p6;return {ctor: "_Tuple2",_0: _p8._0 + _p9._0,_1: _p8._1 + _p9._1};});
      var tof = function (_p10) {    var _p11 = _p10;return {ctor: "_Tuple2",_0: $Basics.toFloat(_p11._0),_1: $Basics.toFloat(_p11._1)};};
      var mouseDelta = A2($Signal.map,function (_p12) {    return invertY(tof(A2($Basics.uncurry,diff,_p12)));},$Signal$Extra.deltas($Mouse.position));
      var dragDelta = A3($Signal$Extra.keepWhen,$Mouse.isDown,{ctor: "_Tuple2",_0: 0,_1: 0},mouseDelta);
      return A3($Signal.foldp,sum,{ctor: "_Tuple2",_0: 0,_1: 0},dragDelta);
   }();
   var panned = function (form) {    return A3($Signal.map2,$Graphics$Collage.move,panPos,form);};
   return _elm.Stage.values = {_op: _op,panned: panned,panPos: panPos};
};